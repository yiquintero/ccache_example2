# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: CMake on multiple platforms

on:
  push:
    branches: [ "master", "main", "develop", "*/*" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            label: win-64
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            label: linux-64
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            label: osx-64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        key: ${{ matrix.os }}-${{ matrix.type }}
        verbose: 2
        variant: ccache

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash -l {0}
      run: >
        cmake -B "${{ github.workspace }}/build"
        -S "${{ github.workspace }}"
        -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator). Use multiple cpu cores available in the runner.
      shell: bash -l {0}
      run: cmake --build "${{ github.workspace }}/build" --config ${{ matrix.build_type }} -j4

    - name: Install
      shell: bash -l {0}
      run: cmake --install "${{ github.workspace }}/build" --config ${{ matrix.build_type }}

    - name: Test
      shell: bash -l {0}
      run: >
        cd "${{ github.workspace }}/install/bin";
        ./hello


